package fel.cvut.af.model.input;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import fel.cvut.af.model.Form;
import fel.cvut.af.model.options.Option;
import fel.cvut.af.model.validator.Validator;
import fel.cvut.af.service.FormBuilder;
import fel.cvut.af.util.serializer.ValidatorCollectionSerializer;
import org.hibernate.validator.constraints.NotEmpty;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Collection;

/**
 * The predecessor of all Inputs defines all common attributes.
 * <p>
 * This class represents single input which can be rendered by client app.
 * It's descendants defines type of input or value type.
 */
@Entity
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "INPUT_TYPE")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class,
        property = "name")
public abstract class Input {

    /**
     * Unique id value, generated by JPA provider.
     */
    @Id
    @GeneratedValue
    @JsonIgnore
    private Long id;

    /**
     * Name of input, it's used for name attribute of input tag.
     * It should be unique in scope of form for this purpose.
     */
    @NotNull
    private String name;

    /**
     * The placeholder will be used as placeholder attribute for input tag.
     * It is not mandatory.
     */
    private String placeholder = "";

    /**
     * The label will be used inside label tag.
     * It is value which user sees right next to input field.
     */
    @NotNull
    @NotEmpty
    private String label;

    /**
     * The {@code Form} object this input is member of.
     */
    @ManyToOne(optional = false, fetch = FetchType.EAGER)
    @JoinColumn(name="form_id")
    @JsonIgnore
    private Form form;

    /**
     * The roles who sees this input.
     * You will use those when calling {@link FormBuilder#buildForm(String, String)}.
     */
    @JsonIgnore
    @ElementCollection(fetch = FetchType.EAGER)
    private Collection<String> roles;

    /**
     * The list of frontend validators (client side input validating).
     * Client app implements those, shows error messages and disable sending the request.
     */
    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy = "input")
    @JsonSerialize(using = ValidatorCollectionSerializer.class)
    private Collection<Validator> validators;

    /**
     * The expected format of response.
     * You can choose whether it will be represented by value, name or even deserializable
     * {@link Option} object.
     */
    @NotNull
    private ResponseFormat responseFormat;

    protected Input() {}

    /**
     * Basic constructor.
     *
     * @param name the name attribute
     * @param placeholder the placeholder attribute
     * @param label the inside of label tag
     * @param roles the roles who can see this input
     * @param responseFormat the expected format of response
     */
    protected Input(String name, String placeholder, String label, Collection<String> roles, ResponseFormat responseFormat) {
        this.name = name;
        this.placeholder = placeholder;
        this.label = label;
        this.roles = roles;
        this.responseFormat = responseFormat;
    }

    /**
     * Simple getter.
     *
     * @return the expected format of response
     */
    public ResponseFormat getResponseFormat() {
        return responseFormat;
    }

    /**
     * Simple setter.
     *
     * @param responseFormat the expected format of response, not null
     */
    public void setResponseFormat(ResponseFormat responseFormat) {
        this.responseFormat = responseFormat;
    }

    /**
     * Simple getter.
     *
     * @return the list of all frontend validators of this input
     */
    public Collection<Validator> getValidators() {
        return validators;
    }

    /**
     * Simple setter.
     *
     * @param validators the collection of input validators, could be null
     */
    public void setValidators(Collection<Validator> validators) {
        this.validators = validators;
    }

    /**
     * Add single {@code Validator}.
     * <p>
     * Creates new collection if necessary.
     *
     * @param validator the {@code Validator} to be added
     */
    public void addValidator(Validator validator) {
        if(this.validators==null) {
            this.validators = new ArrayList<>();
        }
        this.validators.add(validator);
    }

    /**
     * Simple getter.
     *
     * @return the unique Id generated by JPA provider
     */
    public Long getId() {
        return id;
    }

    /**
     * Simple setter.
     *
     * @param id the unique input id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Simple getter.
     *
     * @return the name of this input
     */
    public String getName() {
        return name;
    }

    /**
     * Simple setter.
     *
     * @param name the name of this input, not null, not empty
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Simple getter.
     *
     * @return the placeholder attribute of this input
     */
    public String getPlaceholder() {
        return placeholder;
    }

    /**
     * Simple setter.
     *
     * @param placeholder the placeholder attribute of this input, could be empty
     */
    public void setPlaceholder(String placeholder) {
        this.placeholder = placeholder;
    }

    /**
     * Simple getter.
     *
     * @return the label value of this input
     */
    public String getLabel() {
        return label;
    }

    /**
     * Simple setter.
     *
     * @param label the label attribute of this input, not null, not empty
     */
    public void setLabel(String label) {
        this.label = label;
    }

    /**
     * Simple getter.
     *
     * @return the {@code Form} object this input is member of
     */
    public Form getForm() {
        return form;
    }

    /**
     * Simple setter.
     *
     * @param form the {@code Form} object this input is member of
     */
    public void setForm(Form form) {
        this.form = form;
    }

    /**
     * Simple getter.
     *
     * @return the collection of roles who can see this input
     */
    public Collection<String> getRoles() {
        return roles;
    }

    /**
     * Simple setter.
     *
     * @param roles the collection of roles who can see this input, can be null
     */
    public void setRoles(Collection<String> roles) {
        this.roles = roles;
    }

    /**
     * Simple getter.
     *
     * @return the input type
     */
    public abstract String getInputType();

}
